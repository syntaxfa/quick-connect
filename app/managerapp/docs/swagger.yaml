definitions:
  paginate.Filter:
    properties:
      operation:
        $ref: '#/definitions/paginate.FilterOperation'
      values:
        items: {}
        type: array
    type: object
  paginate.FilterOperation:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    type: integer
    x-enum-varnames:
    - FilterOperationEqual
    - FilterOperationNotEqual
    - FilterOperationGreater
    - FilterOperationGreaterEqual
    - FilterOperationLess
    - FilterOperationLessEqual
    - FilterOperationIn
    - FilterOperationNotIn
    - FilterOperationBetween
  paginate.RequestBase:
    properties:
      current_page:
        type: integer
      descending:
        type: boolean
      filters:
        additionalProperties:
          $ref: '#/definitions/paginate.Filter'
        type: object
      page_size:
        type: integer
      sort_column:
        type: string
    type: object
  paginate.ResponseBase:
    properties:
      current_page:
        type: integer
      page_size:
        type: integer
      total_numbers:
        type: integer
      total_page:
        type: integer
    type: object
  servermsg.ErrorResponse:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
    type: object
  tokenservice.TokenGenerateResponse:
    properties:
      access_expires_in:
        description: in seconds
        type: integer
      access_token:
        type: string
      refresh_expire_in:
        description: in seconds
        type: integer
      refresh_token:
        type: string
    type: object
  tokenservice.TokenRefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  tokenservice.TokenVerifyRequest:
    properties:
      token:
        type: string
    type: object
  types.Role:
    enum:
    - superuser
    - support
    - story
    - file
    - notification
    type: string
    x-enum-varnames:
    - RoleSuperUser
    - RoleSupport
    - RoleStory
    - RoleFile
    - RoleNotification
  userservice.ListUserRequest:
    properties:
      paginated:
        $ref: '#/definitions/paginate.RequestBase'
      username:
        type: string
    type: object
  userservice.ListUserResponse:
    properties:
      paginate:
        $ref: '#/definitions/paginate.ResponseBase'
      results:
        items:
          $ref: '#/definitions/userservice.User'
        type: array
    type: object
  userservice.User:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      last_online_at:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
  userservice.UserCreateRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
  userservice.UserCreateResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      last_online_at:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
  userservice.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  userservice.UserLoginResponse:
    properties:
      token:
        $ref: '#/definitions/tokenservice.TokenGenerateResponse'
      user:
        $ref: '#/definitions/userservice.User'
    type: object
  userservice.UserProfileResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      last_online_at:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
  userservice.UserUpdateFromOwnRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      phone_number:
        type: string
      username:
        type: string
    type: object
  userservice.UserUpdateFromSuperuserRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
  userservice.UserUpdateResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      last_online_at:
        type: string
      phone_number:
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /health-check:
    get:
      consumes:
      - application/json
      description: health check manager service
      produces:
      - application/json
      responses:
        "200":
          description: everything is good
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: health check
      tags:
      - Manager
  /tokens/refresh:
    post:
      consumes:
      - application/json
      description: This API endpoint refresh JSON Web Token (JWT).
      parameters:
      - description: generate pair(refresh & access) tokens
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/tokenservice.TokenRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokenservice.TokenGenerateResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: invalid or expired jwt
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: RefreshToken JWT
      tags:
      - Token
  /tokens/validate:
    post:
      consumes:
      - application/json
      description: This API endpoint validates a JSON Web Token (JWT) to ensure its
        authenticity and integrity. It checks the token's signature, expiration, and
        claims.
      parameters:
      - description: check token validation
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/tokenservice.TokenVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: jwt token is valid
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: invalid or expired jwt
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: ValidateToken JWT
      tags:
      - Token
  /users:
    post:
      consumes:
      - application/json
      description: create a new user by superuser
      parameters:
      - description: check token validation
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/userservice.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/userservice.UserCreateResponse'
        "404":
          description: Not Found
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: CreateUser
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: check token validation
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/userservice.UserUpdateFromOwnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.UserUpdateResponse'
        "404":
          description: Not Found
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: update user
      tags:
      - User
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: This API delete user
      parameters:
      - description: ID of the user to delete
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get user detail by superuser
      parameters:
      - description: ID of the user to update
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.UserProfileResponse'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: get user detail by superuser
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user by superuser
      parameters:
      - description: ID of the user to update
        in: path
        name: userID
        required: true
        type: string
      - description: check token validation
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/userservice.UserUpdateFromSuperuserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.UserUpdateResponse'
        "404":
          description: Not Found
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: update user by superuser
      tags:
      - User
  /users/list:
    post:
      consumes:
      - application/json
      description: This API endpoint get user list.
      parameters:
      - description: list of users
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/userservice.ListUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.ListUserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: get user list
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: user log in and generate pair token(access and refresh)
      parameters:
      - description: check token validation
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/userservice.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/servermsg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: UserLogin
      tags:
      - User
  /users/profile:
    get:
      consumes:
      - application/json
      description: get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userservice.UserProfileResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: UserProfile
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
